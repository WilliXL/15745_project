Args: /home/wfan/llvm-project/build/bin/opt -debug -load /home/wfan/15745_project/code/NontemporalOptimization.so -access-pass mega-stream.bc -o out.bc 
RUN ON FUNCTION main
load wo pointer operand:   %13 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %19 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %20 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %21 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %22 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %30 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %44 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %45 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %46 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %47 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %48 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %58 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %61 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %64 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %67 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %70 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %94 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %95 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %96 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %97 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %98 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %129 = load i32, i32* @ntimes, align 4, !tbaa !2
load wo pointer operand:   %132 = load i32, i32* @ntimes, align 4, !tbaa !2
load wo pointer operand:   %136 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %139 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %142 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %145 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %148 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %154 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %157 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %160 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %163 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %166 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %172 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %175 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %178 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %181 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %187 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %190 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %193 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %196 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %202 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %205 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %208 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %211 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %217 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %223 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %229 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %235 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %238 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %241 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %244 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %250 = load i32, i32* @ntimes, align 4, !tbaa !2
load wo pointer operand:   %258 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %259 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %261 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %263 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %267 = load double*, double** %11, align 8, !tbaa !6
load wo pointer operand:   %277 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %278 = load i32, i32* @Nj, align 4, !tbaa !2
load wo pointer operand:   %279 = load i32, i32* @Nk, align 4, !tbaa !2
load wo pointer operand:   %280 = load i32, i32* @Nl, align 4, !tbaa !2
load wo pointer operand:   %281 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %282 = load double*, double** %4, align 8, !tbaa !6
load wo pointer operand:   %283 = load double*, double** %3, align 8, !tbaa !6
load wo pointer operand:   %284 = load double*, double** %5, align 8, !tbaa !6
load wo pointer operand:   %285 = load double*, double** %6, align 8, !tbaa !6
load wo pointer operand:   %286 = load double*, double** %7, align 8, !tbaa !6
load wo pointer operand:   %287 = load double*, double** %8, align 8, !tbaa !6
load wo pointer operand:   %288 = load double*, double** %9, align 8, !tbaa !6
load wo pointer operand:   %289 = load double*, double** %10, align 8, !tbaa !6
load wo pointer operand:   %290 = load double*, double** %11, align 8, !tbaa !6
load wo pointer operand:   %291 = load i64, i64* %254, align 8, !tbaa !6
load wo pointer operand:   %292 = load i64, i64* %255, align 8, !tbaa !6
load wo pointer operand:   %297 = load i32, i32* @ntimes, align 4, !tbaa !2
load wo pointer operand:   %319 = load i32, i32* @ntimes, align 4, !tbaa !2
load wo pointer operand:   %396 = load i8*, i8** %152, align 8, !tbaa !6
load wo pointer operand:   %397 = load i8*, i8** %170, align 8, !tbaa !6
load wo pointer operand:   %398 = load i8*, i8** %185, align 8, !tbaa !6
load wo pointer operand:   %399 = load i8*, i8** %200, align 8, !tbaa !6
load wo pointer operand:   %400 = load i8*, i8** %215, align 8, !tbaa !6
load wo pointer operand:   %401 = load i8*, i8** %221, align 8, !tbaa !6
load wo pointer operand:   %402 = load i8*, i8** %227, align 8, !tbaa !6
load wo pointer operand:   %403 = load i8*, i8** %233, align 8, !tbaa !6
load wo pointer operand:   %404 = load i8*, i8** %248, align 8, !tbaa !6
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   store double %294, double* %295, align 8, !tbaa !8Delinearizing:   store double %294, double* %295, align 8, !tbaa !8
  In Loop '<unnamed loop>', AccessFn: {0,+,8}<nuw><nsw><%274>
Strides:
8
Terms:
  Succesfully delinearized: %134[{0,+,1}<nuw><nsw><%274>], Sizes: [8]
Delinearizing:   store double %294, double* %295, align 8, !tbaa !8
  In Loop '<unnamed loop>', AccessFn: {0,+,8}<nuw><nsw><%274>
Strides:
8
Terms:
  Succesfully delinearized: %134[{0,+,1}<nuw><nsw><%274>], Sizes: [8]
    common nesting levels = 1
    maximum nesting levels = 1
    SrcSCEV = {%134,+,8}<nsw><%274>
    DstSCEV = {%134,+,8}<nsw><%274>
Strides:
8
Terms:
Strides:
8
Terms:
    subscript 0
	src = {%134,+,8}<nsw><%274>
	dst = {%134,+,8}<nsw><%274>
	class = 1
	loops = {1}
    Separable = {0}
    Coupled = {}
testing subscript 0, SIV
    src = {%134,+,8}<nsw><%274>
    dst = {%134,+,8}<nsw><%274>
	Strong SIV test
	    Coeff = 8, i64
	    SrcConst = %134, double*
	    DstConst = %134, double*
	    Delta = 0, i64
	    Distance = 0
	    Remainder = 0
starting gcd
    Delta = 0
    ConstDelta = 0
	try symbolic RDIV test
	    A1 = 8, type = i64
	    A2 = 8
	    C1 = %134
	    C2 = %134
	    C2 - C1 = 0
	    C1 - C2 = 0
  No temporal reuse: no dependence

RD: 128000
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %311 = load double, double* %310, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %333 = load double, double* %332, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %337 = load double, double* %336, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %341 = load double, double* %340, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %345 = load double, double* %344, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %349 = load double, double* %348, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %353 = load double, double* %352, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %357 = load double, double* %356, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %361 = load double, double* %360, align 8, !tbaa !8
InstOne:   store double %294, double* %295, align 8, !tbaa !8, instTwo:   %377 = load double, double* %376, align 8, !tbaa !8Delinearizing:   store double %294, double* %295, align 8, !tbaa !8
  In Loop '<unnamed loop>', AccessFn: {0,+,8}<nuw><nsw><%274>
Strides:
8
Terms:
  Succesfully delinearized: %134[{0,+,1}<nuw><nsw><%274>], Sizes: [8]
Delinearizing:   %377 = load double, double* %376, align 8, !tbaa !8

IRTwo not valid
RD: 0
isShort: 1
instOne:   store double %294, double* %295, align 8, !tbaa !8
RUN ON FUNCTION parse_args
load wo pointer operand:   %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
load wo pointer operand:   %67 = load i8*, i8** %1, align 8, !tbaa !2
load wo pointer operand:   %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !2
RUN ON FUNCTION .omp_outlined.
load wo pointer operand:   %36 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %40 = load i32, i32* %0, align 4, !tbaa !2
load wo pointer operand:   %46 = load i32, i32* %0, align 4, !tbaa !2
load wo pointer operand:   %47 = load i32, i32* %13, align 4, !tbaa !2
load wo pointer operand:   %50 = load i32, i32* %12, align 4, !tbaa !2
load wo pointer operand:   %53 = load i32, i32* @Nl, align 4
load wo pointer operand:   %55 = load i32, i32* @Nk, align 4
load wo pointer operand:   %57 = load i32, i32* @Nj, align 4
load wo pointer operand:   %59 = load i32, i32* @Ni, align 4
load wo pointer operand:   %108 = load double*, double** %2, align 8
load wo pointer operand:   %109 = load double*, double** %3, align 8
load wo pointer operand:   %243 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %251 = load i32, i32* %17, align 4, !tbaa !2
load wo pointer operand:   %254 = load i32, i32* %16, align 4, !tbaa !2
load wo pointer operand:   %257 = load i32, i32* @Nk, align 4
load wo pointer operand:   %259 = load i32, i32* @Nj, align 4
load wo pointer operand:   %261 = load i32, i32* @Ni, align 4
load wo pointer operand:   %289 = load double*, double** %4, align 8
load wo pointer operand:   %360 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %368 = load i32, i32* %21, align 4, !tbaa !2
load wo pointer operand:   %371 = load i32, i32* %20, align 4, !tbaa !2
load wo pointer operand:   %374 = load i32, i32* @Nl, align 4
load wo pointer operand:   %376 = load i32, i32* @Nj, align 4
load wo pointer operand:   %378 = load i32, i32* @Ni, align 4
load wo pointer operand:   %406 = load double*, double** %5, align 8
load wo pointer operand:   %477 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %485 = load i32, i32* %25, align 4, !tbaa !2
load wo pointer operand:   %488 = load i32, i32* %24, align 4, !tbaa !2
load wo pointer operand:   %491 = load i32, i32* @Nl, align 4
load wo pointer operand:   %493 = load i32, i32* @Nk, align 4
load wo pointer operand:   %495 = load i32, i32* @Ni, align 4
load wo pointer operand:   %523 = load double*, double** %6, align 8
load wo pointer operand:   %594 = load i32, i32* @Ni, align 4, !tbaa !2
load wo pointer operand:   %602 = load i32, i32* %29, align 4, !tbaa !2
load wo pointer operand:   %605 = load i32, i32* %28, align 4, !tbaa !2
load wo pointer operand:   %608 = load double*, double** %7, align 8, !tbaa !29
load wo pointer operand:   %609 = load double*, double** %8, align 8, !tbaa !29
load wo pointer operand:   %610 = load double*, double** %9, align 8, !tbaa !29
load wo pointer operand:   %712 = load i32, i32* @Nm, align 4, !tbaa !2
load wo pointer operand:   %720 = load i32, i32* %33, align 4, !tbaa !2
load wo pointer operand:   %723 = load i32, i32* %32, align 4, !tbaa !2
load wo pointer operand:   %726 = load i32, i32* @Nl, align 4
load wo pointer operand:   %728 = load i32, i32* @Nk, align 4
load wo pointer operand:   %730 = load i32, i32* @Nj, align 4
load wo pointer operand:   %756 = load double*, double** %10, align 8
InstOne:   store double 6.000000e-02, double* %705, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6Delinearizing:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:
Delinearizing:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:

IROne not valid
RD: 0
isShort: 1
instOne:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 7.000000e-02, double* %706, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 7.000000e-02, double* %706, align 8, !tbaa !6, instTwo:   store double 7.000000e-02, double* %706, align 8, !tbaa !6Delinearizing:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:
Delinearizing:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:

IROne not valid
RD: 0
isShort: 1
instOne:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
InstOne:   store double 8.000000e-02, double* %707, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 8.000000e-02, double* %707, align 8, !tbaa !6, instTwo:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
InstOne:   store double 8.000000e-02, double* %707, align 8, !tbaa !6, instTwo:   store double 8.000000e-02, double* %707, align 8, !tbaa !6Delinearizing:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:
Delinearizing:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * %702),+,8}<nsw><%703>
Strides:
8
Terms:

IROne not valid
RD: 0
isShort: 1
instOne:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
InstOne:   store double 1.000000e-02, double* %131, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %132, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %132, align 8, !tbaa !6, instTwo:   store double 0.000000e+00, double* %132, align 8, !tbaa !6Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
InstOne:   store double 1.000000e-02, double* %217, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6Delinearizing:   store double 1.000000e-02, double* %217, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)<nsw>),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 1.000000e-02, double* %217, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %218, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %218, align 8, !tbaa !6, instTwo:   store double 0.000000e+00, double* %132, align 8, !tbaa !6Delinearizing:   store double 0.000000e+00, double* %218, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)<nsw>),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 0.000000e+00, double* %218, align 8, !tbaa !6
InstOne:   store double 1.000000e-02, double* %221, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6Delinearizing:   store double 1.000000e-02, double* %221, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(1 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 1.000000e-02, double* %221, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %222, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %222, align 8, !tbaa !6, instTwo:   store double 0.000000e+00, double* %132, align 8, !tbaa !6Delinearizing:   store double 0.000000e+00, double* %222, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(1 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 0.000000e+00, double* %222, align 8, !tbaa !6
InstOne:   store double 1.000000e-02, double* %225, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6Delinearizing:   store double 1.000000e-02, double* %225, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(2 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 1.000000e-02, double* %225, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %226, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %226, align 8, !tbaa !6, instTwo:   store double 0.000000e+00, double* %132, align 8, !tbaa !6Delinearizing:   store double 0.000000e+00, double* %226, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(2 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 0.000000e+00, double* %226, align 8, !tbaa !6
InstOne:   store double 1.000000e-02, double* %229, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6Delinearizing:   store double 1.000000e-02, double* %229, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(3 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 1.000000e-02, double* %229, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %230, align 8, !tbaa !6, instTwo:   store double 1.000000e-02, double* %131, align 8, !tbaa !6
InstOne:   store double 0.000000e+00, double* %230, align 8, !tbaa !6, instTwo:   store double 0.000000e+00, double* %132, align 8, !tbaa !6Delinearizing:   store double 0.000000e+00, double* %230, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{(3 + ((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64))),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %137)),+,32}<nsw><%214>
Strides:
32
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55
  ERROR: failed to delinearize reference
Delinearizing:   store double 0.000000e+00, double* %132, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{((sext i32 {{(%55 * %53 * %50),+,(%55 * %53)}<%85>,+,%55}<%92> to i64) * (sext i32 %59 to i64) * (sext i32 %57 to i64)),+,((sext i32 %59 to i64) * (sext i32 %57 to i64))}<%103>,+,(sext i32 %59 to i64)}<%116> + %124)<nsw>),+,8}<nsw><%127>
Strides:
8
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms:
(sext i32 %59 to i64)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
%55
(%55 * %53)
Terms after sorting:
(%55 * %53)
((sext i32 %59 to i64) * (sext i32 %57 to i64))
(sext i32 %59 to i64)
%55

IROne not valid
RD: 0
isShort: 1
instOne:   store double 0.000000e+00, double* %230, align 8, !tbaa !6
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 2.000000e-02, double* %352, align 8, !tbaa !6Delinearizing:   store double 2.000000e-02, double* %352, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Strides:
8
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms after sorting:
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64))
(sext i32 %261 to i64)
Sizes:
(sext i32 %257 to i64)
(sext i32 %259 to i64)
(sext i32 %261 to i64)
8
Res: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Remainder: 0
Res: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Sizes[i]: (sext i32 %261 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Remainder: {%301,+,1}<nuw><nsw><%349>
Res: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Sizes[i]: (sext i32 %259 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Remainder: {0,+,1}<nuw><nsw><%296>
Res: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Sizes[i]: (sext i32 %257 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %254 to i64),+,1}<nsw><%283>
Remainder: {0,+,1}<nuw><nsw><%287>
Subscripts:
{(sext i32 %254 to i64),+,1}<nsw><%283>
{0,+,1}<nuw><nsw><%287>
{0,+,1}<nuw><nsw><%296>
{%301,+,1}<nuw><nsw><%349>
succeeded to delinearize {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
ArrayDecl[UnknownSize][(sext i32 %257 to i64)][(sext i32 %259 to i64)][(sext i32 %261 to i64)][8]
ArrayRef[{(sext i32 %254 to i64),+,1}<nsw><%283>][{0,+,1}<nuw><nsw><%287>][{0,+,1}<nuw><nsw><%296>][{%301,+,1}<nuw><nsw><%349>]
  Succesfully delinearized: %289[{(sext i32 %254 to i64),+,1}<nsw><%283>][{0,+,1}<nuw><nsw><%287>][{0,+,1}<nuw><nsw><%296>][{%301,+,1}<nuw><nsw><%349>], Sizes: [(sext i32 %257 to i64)][(sext i32 %259 to i64)][(sext i32 %261 to i64)][8]
Delinearizing:   store double 2.000000e-02, double* %352, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Strides:
8
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms after sorting:
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64))
(sext i32 %261 to i64)
Sizes:
(sext i32 %257 to i64)
(sext i32 %259 to i64)
(sext i32 %261 to i64)
8
Res: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Remainder: 0
Res: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Sizes[i]: (sext i32 %261 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Remainder: {%301,+,1}<nuw><nsw><%349>
Res: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Sizes[i]: (sext i32 %259 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Remainder: {0,+,1}<nuw><nsw><%296>
Res: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Sizes[i]: (sext i32 %257 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %254 to i64),+,1}<nsw><%283>
Remainder: {0,+,1}<nuw><nsw><%287>
Subscripts:
{(sext i32 %254 to i64),+,1}<nsw><%283>
{0,+,1}<nuw><nsw><%287>
{0,+,1}<nuw><nsw><%296>
{%301,+,1}<nuw><nsw><%349>
succeeded to delinearize {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
ArrayDecl[UnknownSize][(sext i32 %257 to i64)][(sext i32 %259 to i64)][(sext i32 %261 to i64)][8]
ArrayRef[{(sext i32 %254 to i64),+,1}<nsw><%283>][{0,+,1}<nuw><nsw><%287>][{0,+,1}<nuw><nsw><%296>][{%301,+,1}<nuw><nsw><%349>]
  Succesfully delinearized: %289[{(sext i32 %254 to i64),+,1}<nsw><%283>][{0,+,1}<nuw><nsw><%287>][{0,+,1}<nuw><nsw><%296>][{%301,+,1}<nuw><nsw><%349>], Sizes: [(sext i32 %257 to i64)][(sext i32 %259 to i64)][(sext i32 %261 to i64)][8]
    common nesting levels = 4
    maximum nesting levels = 4
    SrcSCEV = {((8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>) + %289)<nsw>,+,8}<nsw><%349>
    DstSCEV = {((8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>) + %289)<nsw>,+,8}<nsw><%349>
Strides:
8
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Strides:
8
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms:
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
(sext i32 %261 to i64)
((sext i32 %261 to i64) * (sext i32 %259 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
Terms after sorting:
((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))
((sext i32 %261 to i64) * (sext i32 %259 to i64))
(sext i32 %261 to i64)
Sizes:
(sext i32 %257 to i64)
(sext i32 %259 to i64)
(sext i32 %261 to i64)
8
Res: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Remainder: 0
Res: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Sizes[i]: (sext i32 %261 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Remainder: {%301,+,1}<nuw><nsw><%349>
Res: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Sizes[i]: (sext i32 %259 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Remainder: {0,+,1}<nuw><nsw><%296>
Res: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Sizes[i]: (sext i32 %257 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %254 to i64),+,1}<nsw><%283>
Remainder: {0,+,1}<nuw><nsw><%287>
Subscripts:
{(sext i32 %254 to i64),+,1}<nsw><%283>
{0,+,1}<nuw><nsw><%287>
{0,+,1}<nuw><nsw><%296>
{%301,+,1}<nuw><nsw><%349>
Res: {(8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>),+,8}<nsw><%349>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Remainder: 0
Res: {({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>,+,1}<nsw><%349>
Sizes[i]: (sext i32 %261 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Remainder: {%301,+,1}<nuw><nsw><%349>
Res: {{{((sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,(sext i32 %259 to i64)}<%287>,+,1}<nw><%296>
Sizes[i]: (sext i32 %259 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Remainder: {0,+,1}<nuw><nsw><%296>
Res: {{((sext i32 %257 to i64) * (sext i32 %254 to i64)),+,(sext i32 %257 to i64)}<%283>,+,1}<nw><%287>
Sizes[i]: (sext i32 %257 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %254 to i64),+,1}<nsw><%283>
Remainder: {0,+,1}<nuw><nsw><%287>
Subscripts:
{(sext i32 %254 to i64),+,1}<nsw><%283>
{0,+,1}<nuw><nsw><%287>
{0,+,1}<nuw><nsw><%296>
{%301,+,1}<nuw><nsw><%349>
    subscript 0
	src = {((8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>) + %289)<nsw>,+,8}<nsw><%349>
	dst = {((8 * ({{{((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64) * (sext i32 %254 to i64)),+,((sext i32 %261 to i64) * (sext i32 %259 to i64) * (sext i32 %257 to i64))}<%283>,+,((sext i32 %261 to i64) * (sext i32 %259 to i64))}<%287>,+,(sext i32 %261 to i64)}<%296> + %301)<nsw>) + %289)<nsw>,+,8}<nsw><%349>
	class = 4
	loops = {}
    Separable = {}
    Coupled = {}
  No temporal reuse: distance unknown

temporal reuse unknown
RD: 128000
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 3.000000e-02, double* %469, align 8, !tbaa !6
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 4.000000e-02, double* %586, align 8, !tbaa !6
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
InstOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, instTwo:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
isShort: 0
instOne:   store double 2.000000e-02, double* %352, align 8, !tbaa !6
Inserted NT Inst at:   store double 2.000000e-02, double* %352, align 8, !tbaa !6, !nontemporal !21
InstOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, instTwo:   store double 3.000000e-02, double* %469, align 8, !tbaa !6Delinearizing:   store double 3.000000e-02, double* %469, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Strides:
8
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms after sorting:
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64))
(sext i32 %378 to i64)
Sizes:
(sext i32 %374 to i64)
(sext i32 %376 to i64)
(sext i32 %378 to i64)
8
Res: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Remainder: 0
Res: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Sizes[i]: (sext i32 %378 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Remainder: {%418,+,1}<nuw><nsw><%466>
Res: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Sizes[i]: (sext i32 %376 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Remainder: {0,+,1}<nuw><nsw><%413>
Res: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Sizes[i]: (sext i32 %374 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %371 to i64),+,1}<nsw><%400>
Remainder: {0,+,1}<nuw><nsw><%404>
Subscripts:
{(sext i32 %371 to i64),+,1}<nsw><%400>
{0,+,1}<nuw><nsw><%404>
{0,+,1}<nuw><nsw><%413>
{%418,+,1}<nuw><nsw><%466>
succeeded to delinearize {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
ArrayDecl[UnknownSize][(sext i32 %374 to i64)][(sext i32 %376 to i64)][(sext i32 %378 to i64)][8]
ArrayRef[{(sext i32 %371 to i64),+,1}<nsw><%400>][{0,+,1}<nuw><nsw><%404>][{0,+,1}<nuw><nsw><%413>][{%418,+,1}<nuw><nsw><%466>]
  Succesfully delinearized: %406[{(sext i32 %371 to i64),+,1}<nsw><%400>][{0,+,1}<nuw><nsw><%404>][{0,+,1}<nuw><nsw><%413>][{%418,+,1}<nuw><nsw><%466>], Sizes: [(sext i32 %374 to i64)][(sext i32 %376 to i64)][(sext i32 %378 to i64)][8]
Delinearizing:   store double 3.000000e-02, double* %469, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Strides:
8
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms after sorting:
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64))
(sext i32 %378 to i64)
Sizes:
(sext i32 %374 to i64)
(sext i32 %376 to i64)
(sext i32 %378 to i64)
8
Res: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Remainder: 0
Res: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Sizes[i]: (sext i32 %378 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Remainder: {%418,+,1}<nuw><nsw><%466>
Res: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Sizes[i]: (sext i32 %376 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Remainder: {0,+,1}<nuw><nsw><%413>
Res: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Sizes[i]: (sext i32 %374 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %371 to i64),+,1}<nsw><%400>
Remainder: {0,+,1}<nuw><nsw><%404>
Subscripts:
{(sext i32 %371 to i64),+,1}<nsw><%400>
{0,+,1}<nuw><nsw><%404>
{0,+,1}<nuw><nsw><%413>
{%418,+,1}<nuw><nsw><%466>
succeeded to delinearize {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
ArrayDecl[UnknownSize][(sext i32 %374 to i64)][(sext i32 %376 to i64)][(sext i32 %378 to i64)][8]
ArrayRef[{(sext i32 %371 to i64),+,1}<nsw><%400>][{0,+,1}<nuw><nsw><%404>][{0,+,1}<nuw><nsw><%413>][{%418,+,1}<nuw><nsw><%466>]
  Succesfully delinearized: %406[{(sext i32 %371 to i64),+,1}<nsw><%400>][{0,+,1}<nuw><nsw><%404>][{0,+,1}<nuw><nsw><%413>][{%418,+,1}<nuw><nsw><%466>], Sizes: [(sext i32 %374 to i64)][(sext i32 %376 to i64)][(sext i32 %378 to i64)][8]
    common nesting levels = 4
    maximum nesting levels = 4
    SrcSCEV = {((8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>) + %406)<nsw>,+,8}<nsw><%466>
    DstSCEV = {((8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>) + %406)<nsw>,+,8}<nsw><%466>
Strides:
8
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Strides:
8
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms:
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
(sext i32 %378 to i64)
((sext i32 %378 to i64) * (sext i32 %376 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
Terms after sorting:
((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))
((sext i32 %378 to i64) * (sext i32 %376 to i64))
(sext i32 %378 to i64)
Sizes:
(sext i32 %374 to i64)
(sext i32 %376 to i64)
(sext i32 %378 to i64)
8
Res: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Remainder: 0
Res: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Sizes[i]: (sext i32 %378 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Remainder: {%418,+,1}<nuw><nsw><%466>
Res: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Sizes[i]: (sext i32 %376 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Remainder: {0,+,1}<nuw><nsw><%413>
Res: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Sizes[i]: (sext i32 %374 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %371 to i64),+,1}<nsw><%400>
Remainder: {0,+,1}<nuw><nsw><%404>
Subscripts:
{(sext i32 %371 to i64),+,1}<nsw><%400>
{0,+,1}<nuw><nsw><%404>
{0,+,1}<nuw><nsw><%413>
{%418,+,1}<nuw><nsw><%466>
Res: {(8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>),+,8}<nsw><%466>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Remainder: 0
Res: {({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>,+,1}<nsw><%466>
Sizes[i]: (sext i32 %378 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Remainder: {%418,+,1}<nuw><nsw><%466>
Res: {{{((sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,(sext i32 %376 to i64)}<%404>,+,1}<nw><%413>
Sizes[i]: (sext i32 %376 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Remainder: {0,+,1}<nuw><nsw><%413>
Res: {{((sext i32 %374 to i64) * (sext i32 %371 to i64)),+,(sext i32 %374 to i64)}<%400>,+,1}<nw><%404>
Sizes[i]: (sext i32 %374 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %371 to i64),+,1}<nsw><%400>
Remainder: {0,+,1}<nuw><nsw><%404>
Subscripts:
{(sext i32 %371 to i64),+,1}<nsw><%400>
{0,+,1}<nuw><nsw><%404>
{0,+,1}<nuw><nsw><%413>
{%418,+,1}<nuw><nsw><%466>
    subscript 0
	src = {((8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>) + %406)<nsw>,+,8}<nsw><%466>
	dst = {((8 * ({{{((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64) * (sext i32 %371 to i64)),+,((sext i32 %378 to i64) * (sext i32 %376 to i64) * (sext i32 %374 to i64))}<%400>,+,((sext i32 %378 to i64) * (sext i32 %376 to i64))}<%404>,+,(sext i32 %378 to i64)}<%413> + %418)<nsw>) + %406)<nsw>,+,8}<nsw><%466>
	class = 4
	loops = {}
    Separable = {}
    Coupled = {}
  No temporal reuse: distance unknown

temporal reuse unknown
RD: 128000
InstOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, instTwo:   store double 4.000000e-02, double* %586, align 8, !tbaa !6
InstOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, instTwo:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
InstOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, instTwo:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
isShort: 0
instOne:   store double 3.000000e-02, double* %469, align 8, !tbaa !6
Inserted NT Inst at:   store double 3.000000e-02, double* %469, align 8, !tbaa !6, !nontemporal !21
InstOne:   store double 4.000000e-02, double* %586, align 8, !tbaa !6, instTwo:   store double 4.000000e-02, double* %586, align 8, !tbaa !6Delinearizing:   store double 4.000000e-02, double* %586, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Strides:
8
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms after sorting:
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64))
(sext i32 %495 to i64)
Sizes:
(sext i32 %491 to i64)
(sext i32 %493 to i64)
(sext i32 %495 to i64)
8
Res: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Remainder: 0
Res: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Sizes[i]: (sext i32 %495 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Remainder: {%535,+,1}<nuw><nsw><%583>
Res: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Sizes[i]: (sext i32 %493 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Remainder: {0,+,1}<nuw><nsw><%530>
Res: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Sizes[i]: (sext i32 %491 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %488 to i64),+,1}<nsw><%517>
Remainder: {0,+,1}<nuw><nsw><%521>
Subscripts:
{(sext i32 %488 to i64),+,1}<nsw><%517>
{0,+,1}<nuw><nsw><%521>
{0,+,1}<nuw><nsw><%530>
{%535,+,1}<nuw><nsw><%583>
succeeded to delinearize {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
ArrayDecl[UnknownSize][(sext i32 %491 to i64)][(sext i32 %493 to i64)][(sext i32 %495 to i64)][8]
ArrayRef[{(sext i32 %488 to i64),+,1}<nsw><%517>][{0,+,1}<nuw><nsw><%521>][{0,+,1}<nuw><nsw><%530>][{%535,+,1}<nuw><nsw><%583>]
  Succesfully delinearized: %523[{(sext i32 %488 to i64),+,1}<nsw><%517>][{0,+,1}<nuw><nsw><%521>][{0,+,1}<nuw><nsw><%530>][{%535,+,1}<nuw><nsw><%583>], Sizes: [(sext i32 %491 to i64)][(sext i32 %493 to i64)][(sext i32 %495 to i64)][8]
Delinearizing:   store double 4.000000e-02, double* %586, align 8, !tbaa !6
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Strides:
8
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms after sorting:
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64))
(sext i32 %495 to i64)
Sizes:
(sext i32 %491 to i64)
(sext i32 %493 to i64)
(sext i32 %495 to i64)
8
Res: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Remainder: 0
Res: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Sizes[i]: (sext i32 %495 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Remainder: {%535,+,1}<nuw><nsw><%583>
Res: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Sizes[i]: (sext i32 %493 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Remainder: {0,+,1}<nuw><nsw><%530>
Res: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Sizes[i]: (sext i32 %491 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %488 to i64),+,1}<nsw><%517>
Remainder: {0,+,1}<nuw><nsw><%521>
Subscripts:
{(sext i32 %488 to i64),+,1}<nsw><%517>
{0,+,1}<nuw><nsw><%521>
{0,+,1}<nuw><nsw><%530>
{%535,+,1}<nuw><nsw><%583>
succeeded to delinearize {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
ArrayDecl[UnknownSize][(sext i32 %491 to i64)][(sext i32 %493 to i64)][(sext i32 %495 to i64)][8]
ArrayRef[{(sext i32 %488 to i64),+,1}<nsw><%517>][{0,+,1}<nuw><nsw><%521>][{0,+,1}<nuw><nsw><%530>][{%535,+,1}<nuw><nsw><%583>]
  Succesfully delinearized: %523[{(sext i32 %488 to i64),+,1}<nsw><%517>][{0,+,1}<nuw><nsw><%521>][{0,+,1}<nuw><nsw><%530>][{%535,+,1}<nuw><nsw><%583>], Sizes: [(sext i32 %491 to i64)][(sext i32 %493 to i64)][(sext i32 %495 to i64)][8]
    common nesting levels = 4
    maximum nesting levels = 4
    SrcSCEV = {((8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>) + %523)<nsw>,+,8}<nsw><%583>
    DstSCEV = {((8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>) + %523)<nsw>,+,8}<nsw><%583>
Strides:
8
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Strides:
8
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms:
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
(sext i32 %495 to i64)
((sext i32 %495 to i64) * (sext i32 %493 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
Terms after sorting:
((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))
((sext i32 %495 to i64) * (sext i32 %493 to i64))
(sext i32 %495 to i64)
Sizes:
(sext i32 %491 to i64)
(sext i32 %493 to i64)
(sext i32 %495 to i64)
8
Res: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Remainder: 0
Res: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Sizes[i]: (sext i32 %495 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Remainder: {%535,+,1}<nuw><nsw><%583>
Res: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Sizes[i]: (sext i32 %493 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Remainder: {0,+,1}<nuw><nsw><%530>
Res: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Sizes[i]: (sext i32 %491 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %488 to i64),+,1}<nsw><%517>
Remainder: {0,+,1}<nuw><nsw><%521>
Subscripts:
{(sext i32 %488 to i64),+,1}<nsw><%517>
{0,+,1}<nuw><nsw><%521>
{0,+,1}<nuw><nsw><%530>
{%535,+,1}<nuw><nsw><%583>
Res: {(8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>),+,8}<nsw><%583>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Remainder: 0
Res: {({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>,+,1}<nsw><%583>
Sizes[i]: (sext i32 %495 to i64)
Res divided by Sizes[i]:
Quotient: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Remainder: {%535,+,1}<nuw><nsw><%583>
Res: {{{((sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,(sext i32 %493 to i64)}<%521>,+,1}<nw><%530>
Sizes[i]: (sext i32 %493 to i64)
Res divided by Sizes[i]:
Quotient: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Remainder: {0,+,1}<nuw><nsw><%530>
Res: {{((sext i32 %491 to i64) * (sext i32 %488 to i64)),+,(sext i32 %491 to i64)}<%517>,+,1}<nw><%521>
Sizes[i]: (sext i32 %491 to i64)
Res divided by Sizes[i]:
Quotient: {(sext i32 %488 to i64),+,1}<nsw><%517>
Remainder: {0,+,1}<nuw><nsw><%521>
Subscripts:
{(sext i32 %488 to i64),+,1}<nsw><%517>
{0,+,1}<nuw><nsw><%521>
{0,+,1}<nuw><nsw><%530>
{%535,+,1}<nuw><nsw><%583>
    subscript 0
	src = {((8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>) + %523)<nsw>,+,8}<nsw><%583>
	dst = {((8 * ({{{((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64) * (sext i32 %488 to i64)),+,((sext i32 %495 to i64) * (sext i32 %493 to i64) * (sext i32 %491 to i64))}<%517>,+,((sext i32 %495 to i64) * (sext i32 %493 to i64))}<%521>,+,(sext i32 %495 to i64)}<%530> + %535)<nsw>) + %523)<nsw>,+,8}<nsw><%583>
	class = 4
	loops = {}
    Separable = {}
    Coupled = {}
  No temporal reuse: distance unknown

temporal reuse unknown
RD: 128000
InstOne:   store double 4.000000e-02, double* %586, align 8, !tbaa !6, instTwo:   store double 6.000000e-02, double* %705, align 8, !tbaa !6
InstOne:   store double 4.000000e-02, double* %586, align 8, !tbaa !6, instTwo:   store double 7.000000e-02, double* %706, align 8, !tbaa !6
InstOne:   store double 4.000000e-02, double* %586, align 8, !tbaa !6, instTwo:   store double 8.000000e-02, double* %707, align 8, !tbaa !6
isShort: 0
instOne:   store double 4.000000e-02, double* %586, align 8, !tbaa !6
Inserted NT Inst at:   store double 4.000000e-02, double* %586, align 8, !tbaa !6, !nontemporal !21
RUN ON FUNCTION kernel
load wo pointer operand:   %75 = load <2 x double>, <2 x double>* %74, align 8, !tbaa !2
load wo pointer operand:   %78 = load <2 x double>, <2 x double>* %77, align 8, !tbaa !2
load wo pointer operand:   %87 = load <2 x double>, <2 x double>* %86, align 8, !tbaa !2
load wo pointer operand:   %90 = load <2 x double>, <2 x double>* %89, align 8, !tbaa !2
load wo pointer operand:   %104 = load <2 x double>, <2 x double>* %103, align 8, !tbaa !2
load wo pointer operand:   %107 = load <2 x double>, <2 x double>* %106, align 8, !tbaa !2
InstOne:   store double %149, double* %130, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %149, double* %130, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %149, double* %130, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2Delinearizing:   store double %149, double* %130, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%57>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %7[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
Delinearizing:   %131 = load double, double* %130, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%57>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %7[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
    common nesting levels = 5
    maximum nesting levels = 5
    SrcSCEV = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    DstSCEV = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%57>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %2 to i64)}<%42>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%57>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
    subscript 0
	src = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	dst = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	class = 3
	loops = {1 3 4 5}
    Separable = {0}
    Coupled = {}
testing subscript 0, MIV
    src = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    dst = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
starting gcd
    Delta = 0
    ConstDelta = 0
starting Banerjee
    Src = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    3	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %7
    Dst = {{{{%7,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    3	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %7
	Delta = 0
	Bounds[*]
	    1	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))
	    2	0	0
	    3	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))
	    4	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))
	    5	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	Bound for level = 1
	    <	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	Bound for level = 3
	    <	(((-2 + (zext i32 %2 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %2 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %2 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %2 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	Bound for level = 4
	    <	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64)) + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))))	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64)) + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))))
	    =	0	0
	    >	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smin ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smax ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))
	Bound for level = 5
	    <	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	-8
	    =	0	0
	    >	8	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	[ < < < < ]
	[ < < < = ]
	[ < < < > ]
	[ < < = < ]
	[ < < = = ]
	[ < < = > ]
	[ < < > < ]
	[ < < > = ]
	[ < < > > ]
	[ < = < < ]
	[ < = < = ]
	[ < = < > ]
	[ < = = < ]
	[ < = = = ]
	[ < = = > ]
	[ < = > < ]
	[ < = > = ]
	[ < = > > ]
	[ < > < < ]
	[ < > < = ]
	[ < > < > ]
	[ < > = < ]
	[ < > = = ]
	[ < > = > ]
	[ < > > < ]
	[ < > > = ]
	[ < > > > ]
	[ = < < < ]
	[ = < < = ]
	[ = < < > ]
	[ = < = < ]
	[ = < = = ]
	[ = < = > ]
	[ = < > < ]
	[ = < > = ]
	[ = < > > ]
	[ = = < < ]
	[ = = < = ]
	[ = = < > ]
	[ = = = = ]
	[ = = > < ]
	[ = = > = ]
	[ = = > > ]
	[ = > < < ]
	[ = > < = ]
	[ = > < > ]
	[ = > = < ]
	[ = > = = ]
	[ = > = > ]
	[ = > > < ]
	[ = > > = ]
	[ = > > > ]
	[ > < < < ]
	[ > < < = ]
	[ > < < > ]
	[ > < = < ]
	[ > < = = ]
	[ > < = > ]
	[ > < > < ]
	[ > < > = ]
	[ > < > > ]
	[ > = < < ]
	[ > = < = ]
	[ > = < > ]
	[ > = = < ]
	[ > = = = ]
	[ > = = > ]
	[ > = > < ]
	[ > = > = ]
	[ > = > > ]
	[ > > < < ]
	[ > > < = ]
	[ > > < > ]
	[ > > = < ]
	[ > > = = ]
	[ > > = > ]
	[ > > > < ]
	[ > > > = ]
	[ > > > > ]
  Found temporal reuse

RD: 127999
isShort: 1
instOne:   store double %149, double* %130, align 8, !tbaa !2
InstOne:   store double %150, double* %137, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %150, double* %137, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %150, double* %137, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2
InstOne:   store double %150, double* %137, align 8, !tbaa !2, instTwo:   %135 = load double, double* %134, align 8, !tbaa !2
InstOne:   store double %150, double* %137, align 8, !tbaa !2, instTwo:   %138 = load double, double* %137, align 8, !tbaa !2Delinearizing:   store double %150, double* %137, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %8[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
Delinearizing:   %138 = load double, double* %137, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %8[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
    common nesting levels = 5
    maximum nesting levels = 5
    SrcSCEV = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    DstSCEV = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %1 to i64)}<%48>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
    subscript 0
	src = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	dst = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	class = 3
	loops = {1 2 4 5}
    Separable = {0}
    Coupled = {}
testing subscript 0, MIV
    src = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    dst = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
starting gcd
    Delta = 0
    ConstDelta = 0
starting Banerjee
    Src = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %8
    Dst = {{{{%8,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %8
	Delta = 0
	Bounds[*]
	    1	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))))	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))))
	    2	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))
	    3	0	0
	    4	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))
	    5	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	Bound for level = 1
	    <	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %3 to i64)))
	Bound for level = 2
	    <	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	Bound for level = 4
	    <	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64)) + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))))	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64)) + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))))
	    =	0	0
	    >	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smin ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smax ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))
	Bound for level = 5
	    <	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	-8
	    =	0	0
	    >	8	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	[ < < < < ]
	[ < < < = ]
	[ < < < > ]
	[ < < = < ]
	[ < < = = ]
	[ < < = > ]
	[ < < > < ]
	[ < < > = ]
	[ < < > > ]
	[ < = < < ]
	[ < = < = ]
	[ < = < > ]
	[ < = = < ]
	[ < = = = ]
	[ < = = > ]
	[ < = > < ]
	[ < = > = ]
	[ < = > > ]
	[ < > < < ]
	[ < > < = ]
	[ < > < > ]
	[ < > = < ]
	[ < > = = ]
	[ < > = > ]
	[ < > > < ]
	[ < > > = ]
	[ < > > > ]
	[ = < < < ]
	[ = < < = ]
	[ = < < > ]
	[ = < = < ]
	[ = < = = ]
	[ = < = > ]
	[ = < > < ]
	[ = < > = ]
	[ = < > > ]
	[ = = < < ]
	[ = = < = ]
	[ = = < > ]
	[ = = = = ]
	[ = = > < ]
	[ = = > = ]
	[ = = > > ]
	[ = > < < ]
	[ = > < = ]
	[ = > < > ]
	[ = > = < ]
	[ = > = = ]
	[ = > = > ]
	[ = > > < ]
	[ = > > = ]
	[ = > > > ]
	[ > < < < ]
	[ > < < = ]
	[ > < < > ]
	[ > < = < ]
	[ > < = = ]
	[ > < = > ]
	[ > < > < ]
	[ > < > = ]
	[ > < > > ]
	[ > = < < ]
	[ > = < = ]
	[ > = < > ]
	[ > = = < ]
	[ > = = = ]
	[ > = = > ]
	[ > = > < ]
	[ > = > = ]
	[ > = > > ]
	[ > > < < ]
	[ > > < = ]
	[ > > < > ]
	[ > > = < ]
	[ > > = = ]
	[ > > = > ]
	[ > > > < ]
	[ > > > = ]
	[ > > > > ]
  Found temporal reuse

RD: 127999
isShort: 1
instOne:   store double %150, double* %137, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %135 = load double, double* %134, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %138 = load double, double* %137, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %142 = load double, double* %141, align 8, !tbaa !2
InstOne:   store double %151, double* %144, align 8, !tbaa !2, instTwo:   %145 = load double, double* %144, align 8, !tbaa !2Delinearizing:   store double %151, double* %144, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %2 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %9[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %0 to i64)][8]
Delinearizing:   %145 = load double, double* %144, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %2 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %9[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %0 to i64)][8]
    common nesting levels = 5
    maximum nesting levels = 5
    SrcSCEV = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
    DstSCEV = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %2 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %0 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{0,+,((sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %0 to i64)}<%57>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%121>
    subscript 0
	src = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
	dst = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
	class = 3
	loops = {1 2 3 5}
    Separable = {0}
    Coupled = {}
testing subscript 0, MIV
    src = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
    dst = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
starting gcd
    Delta = 0
    ConstDelta = 0
starting Banerjee
    Src = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %9
    Dst = {{{{%9,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64))<nsw>}<%57>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	0	Pos Part = 0	Neg Part = 0	Upper Bound = +inf
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %9
	Delta = 0
	Bounds[*]
	    1	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))
	    2	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))))	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))))
	    3	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))
	    4	0	0
	    5	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	Bound for level = 1
	    <	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	Bound for level = 2
	    <	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %2 to i64)))
	Bound for level = 3
	    <	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %2 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64)) + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))))	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %2 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64)) + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))))
	    =	0	0
	    >	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smin ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smax ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))
	Bound for level = 5
	    <	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	-8
	    =	0	0
	    >	8	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	[ < < < < ]
	[ < < < = ]
	[ < < < > ]
	[ < < = < ]
	[ < < = = ]
	[ < < = > ]
	[ < < > < ]
	[ < < > = ]
	[ < < > > ]
	[ < = < < ]
	[ < = < = ]
	[ < = < > ]
	[ < = = < ]
	[ < = = = ]
	[ < = = > ]
	[ < = > < ]
	[ < = > = ]
	[ < = > > ]
	[ < > < < ]
	[ < > < = ]
	[ < > < > ]
	[ < > = < ]
	[ < > = = ]
	[ < > = > ]
	[ < > > < ]
	[ < > > = ]
	[ < > > > ]
	[ = < < < ]
	[ = < < = ]
	[ = < < > ]
	[ = < = < ]
	[ = < = = ]
	[ = < = > ]
	[ = < > < ]
	[ = < > = ]
	[ = < > > ]
	[ = = < < ]
	[ = = < = ]
	[ = = < > ]
	[ = = = = ]
	[ = = > < ]
	[ = = > = ]
	[ = = > > ]
	[ = > < < ]
	[ = > < = ]
	[ = > < > ]
	[ = > = < ]
	[ = > = = ]
	[ = > = > ]
	[ = > > < ]
	[ = > > = ]
	[ = > > > ]
	[ > < < < ]
	[ > < < = ]
	[ > < < > ]
	[ > < = < ]
	[ > < = = ]
	[ > < = > ]
	[ > < > < ]
	[ > < > = ]
	[ > < > > ]
	[ > = < < ]
	[ > = < = ]
	[ > = < > ]
	[ > = = < ]
	[ > = = = ]
	[ > = = > ]
	[ > = > < ]
	[ > = > = ]
	[ > = > > ]
	[ > > < < ]
	[ > > < = ]
	[ > > < > ]
	[ > > = < ]
	[ > > = = ]
	[ > > = > ]
	[ > > > < ]
	[ > > > = ]
	[ > > > > ]
  Found temporal reuse

RD: 127999
isShort: 1
instOne:   store double %151, double* %144, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %135 = load double, double* %134, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %138 = load double, double* %137, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %142 = load double, double* %141, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %145 = load double, double* %144, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %149, double* %130, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %150, double* %137, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %151, double* %144, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %147, double* %153, align 8, !tbaa !2Delinearizing:   store double %147, double* %153, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %5[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
Delinearizing:   store double %147, double* %153, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
succeeded to delinearize {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>]
  Succesfully delinearized: %5[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>][{0,+,1}<nuw><nsw><%121>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][(sext i32 %0 to i64)][8]
    common nesting levels = 5
    maximum nesting levels = 5
    SrcSCEV = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    DstSCEV = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Strides:
8
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %0 to i64))<nsw>
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %0 to i64) * (sext i32 %1 to i64))
(sext i32 %0 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
(sext i32 %0 to i64)
8
Res: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
Res: {{{{{0,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Remainder: 0
Res: {{{{{0,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,((sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(sext i32 %0 to i64)}<nsw><%113>,+,1}<nsw><%121>
Sizes[i]: (sext i32 %0 to i64)
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: {0,+,1}<nuw><nsw><%121>
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
{0,+,1}<nuw><nsw><%121>
    subscript 0
	src = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	dst = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	class = 3
	loops = {1 2 3 4 5}
    Separable = {0}
    Coupled = {}
testing subscript 0, MIV
    src = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
    dst = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
starting gcd
    Delta = 0
    ConstDelta = 0
starting Banerjee
    Src = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %5
    Dst = {{{{{%5,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))}<%57>,+,(8 * (sext i32 %0 to i64))<nsw>}<%113>,+,8}<nsw><%121>
	Coefficient Info
	    1	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))	Pos Part = (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Neg Part = (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	(8 * (sext i32 %0 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %0 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %0 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    5	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %0 to i64))<nsw>
	    Constant = %5
	Delta = 0
	Bounds[*]
	    1	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))
	    2	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))
	    3	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))
	    4	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))	((-1 + (zext i32 %1 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw> + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))
	    5	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	Bound for level = 1
	    <	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	Bound for level = 2
	    <	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	Bound for level = 3
	    <	(((-2 + (zext i32 %2 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %2 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)) + (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))))) + (-8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %2 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))<nsw> + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))	(((-2 + (zext i32 %2 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64))))) + (8 * (sext i32 %0 to i64) * (sext i32 %1 to i64)))
	Bound for level = 4
	    <	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smin ((-8 * (sext i32 %0 to i64)) + (0 smin (8 * (sext i32 %0 to i64))<nsw>)))))	((-8 * (sext i32 %0 to i64)) + ((-2 + (zext i32 %1 to i64)) * (0 smax ((-8 * (sext i32 %0 to i64)) + (0 smax (8 * (sext i32 %0 to i64))<nsw>)))))
	    =	0	0
	    >	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smin ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smax (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))	((8 * (sext i32 %0 to i64))<nsw> + ((-2 + (zext i32 %1 to i64)) * (0 smax ((8 * (sext i32 %0 to i64))<nsw> + (-1 * (0 smin (8 * (sext i32 %0 to i64))<nsw>))<nsw>))))
	Bound for level = 5
	    <	(8 + (-8 * (zext i32 %0 to i64))<nsw>)<nsw>	-8
	    =	0	0
	    >	8	(-8 + (8 * (zext i32 %0 to i64))<nuw><nsw>)<nsw>
	[ < < < < < ]
	[ < < < < = ]
	[ < < < < > ]
	[ < < < = < ]
	[ < < < = = ]
	[ < < < = > ]
	[ < < < > < ]
	[ < < < > = ]
	[ < < < > > ]
	[ < < = < < ]
	[ < < = < = ]
	[ < < = < > ]
	[ < < = = < ]
	[ < < = = = ]
	[ < < = = > ]
	[ < < = > < ]
	[ < < = > = ]
	[ < < = > > ]
	[ < < > < < ]
	[ < < > < = ]
	[ < < > < > ]
	[ < < > = < ]
	[ < < > = = ]
	[ < < > = > ]
	[ < < > > < ]
	[ < < > > = ]
	[ < < > > > ]
	[ < = < < < ]
	[ < = < < = ]
	[ < = < < > ]
	[ < = < = < ]
	[ < = < = = ]
	[ < = < = > ]
	[ < = < > < ]
	[ < = < > = ]
	[ < = < > > ]
	[ < = = < < ]
	[ < = = < = ]
	[ < = = < > ]
	[ < = = = < ]
	[ < = = = = ]
	[ < = = = > ]
	[ < = = > < ]
	[ < = = > = ]
	[ < = = > > ]
	[ < = > < < ]
	[ < = > < = ]
	[ < = > < > ]
	[ < = > = < ]
	[ < = > = = ]
	[ < = > = > ]
	[ < = > > < ]
	[ < = > > = ]
	[ < = > > > ]
	[ < > < < < ]
	[ < > < < = ]
	[ < > < < > ]
	[ < > < = < ]
	[ < > < = = ]
	[ < > < = > ]
	[ < > < > < ]
	[ < > < > = ]
	[ < > < > > ]
	[ < > = < < ]
	[ < > = < = ]
	[ < > = < > ]
	[ < > = = < ]
	[ < > = = = ]
	[ < > = = > ]
	[ < > = > < ]
	[ < > = > = ]
	[ < > = > > ]
	[ < > > < < ]
	[ < > > < = ]
	[ < > > < > ]
	[ < > > = < ]
	[ < > > = = ]
	[ < > > = > ]
	[ < > > > < ]
	[ < > > > = ]
	[ < > > > > ]
	[ = < < < < ]
	[ = < < < = ]
	[ = < < < > ]
	[ = < < = < ]
	[ = < < = = ]
	[ = < < = > ]
	[ = < < > < ]
	[ = < < > = ]
	[ = < < > > ]
	[ = < = < < ]
	[ = < = < = ]
	[ = < = < > ]
	[ = < = = < ]
	[ = < = = = ]
	[ = < = = > ]
	[ = < = > < ]
	[ = < = > = ]
	[ = < = > > ]
	[ = < > < < ]
	[ = < > < = ]
	[ = < > < > ]
	[ = < > = < ]
	[ = < > = = ]
	[ = < > = > ]
	[ = < > > < ]
	[ = < > > = ]
	[ = < > > > ]
	[ = = < < < ]
	[ = = < < = ]
	[ = = < < > ]
	[ = = < = < ]
	[ = = < = = ]
	[ = = < = > ]
	[ = = < > < ]
	[ = = < > = ]
	[ = = < > > ]
	[ = = = < < ]
	[ = = = < = ]
	[ = = = < > ]
	[ = = = = = ]
	[ = = = > < ]
	[ = = = > = ]
	[ = = = > > ]
	[ = = > < < ]
	[ = = > < = ]
	[ = = > < > ]
	[ = = > = < ]
	[ = = > = = ]
	[ = = > = > ]
	[ = = > > < ]
	[ = = > > = ]
	[ = = > > > ]
	[ = > < < < ]
	[ = > < < = ]
	[ = > < < > ]
	[ = > < = < ]
	[ = > < = = ]
	[ = > < = > ]
	[ = > < > < ]
	[ = > < > = ]
	[ = > < > > ]
	[ = > = < < ]
	[ = > = < = ]
	[ = > = < > ]
	[ = > = = < ]
	[ = > = = = ]
	[ = > = = > ]
	[ = > = > < ]
	[ = > = > = ]
	[ = > = > > ]
	[ = > > < < ]
	[ = > > < = ]
	[ = > > < > ]
	[ = > > = < ]
	[ = > > = = ]
	[ = > > = > ]
	[ = > > > < ]
	[ = > > > = ]
	[ = > > > > ]
	[ > < < < < ]
	[ > < < < = ]
	[ > < < < > ]
	[ > < < = < ]
	[ > < < = = ]
	[ > < < = > ]
	[ > < < > < ]
	[ > < < > = ]
	[ > < < > > ]
	[ > < = < < ]
	[ > < = < = ]
	[ > < = < > ]
	[ > < = = < ]
	[ > < = = = ]
	[ > < = = > ]
	[ > < = > < ]
	[ > < = > = ]
	[ > < = > > ]
	[ > < > < < ]
	[ > < > < = ]
	[ > < > < > ]
	[ > < > = < ]
	[ > < > = = ]
	[ > < > = > ]
	[ > < > > < ]
	[ > < > > = ]
	[ > < > > > ]
	[ > = < < < ]
	[ > = < < = ]
	[ > = < < > ]
	[ > = < = < ]
	[ > = < = = ]
	[ > = < = > ]
	[ > = < > < ]
	[ > = < > = ]
	[ > = < > > ]
	[ > = = < < ]
	[ > = = < = ]
	[ > = = < > ]
	[ > = = = < ]
	[ > = = = = ]
	[ > = = = > ]
	[ > = = > < ]
	[ > = = > = ]
	[ > = = > > ]
	[ > = > < < ]
	[ > = > < = ]
	[ > = > < > ]
	[ > = > = < ]
	[ > = > = = ]
	[ > = > = > ]
	[ > = > > < ]
	[ > = > > = ]
	[ > = > > > ]
	[ > > < < < ]
	[ > > < < = ]
	[ > > < < > ]
	[ > > < = < ]
	[ > > < = = ]
	[ > > < = > ]
	[ > > < > < ]
	[ > > < > = ]
	[ > > < > > ]
	[ > > = < < ]
	[ > > = < = ]
	[ > > = < > ]
	[ > > = = < ]
	[ > > = = = ]
	[ > > = = > ]
	[ > > = > < ]
	[ > > = > = ]
	[ > > = > > ]
	[ > > > < < ]
	[ > > > < = ]
	[ > > > < > ]
	[ > > > = < ]
	[ > > > = = ]
	[ > > > = > ]
	[ > > > > < ]
	[ > > > > = ]
	[ > > > > > ]
  No temporal reuse: distance unknown

temporal reuse unknown
RD: 128000
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %158 = load double, double* %157, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %159, double* %157, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   %169 = load double, double* %168, align 8, !tbaa !2
InstOne:   store double %147, double* %153, align 8, !tbaa !2, instTwo:   store double %170, double* %168, align 8, !tbaa !2
isShort: 0
instOne:   store double %147, double* %153, align 8, !tbaa !2
Inserted NT Inst at:   store double %147, double* %153, align 8, !tbaa !2, !nontemporal !8
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %135 = load double, double* %134, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %138 = load double, double* %137, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %142 = load double, double* %141, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %145 = load double, double* %144, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   store double %149, double* %130, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   store double %150, double* %137, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   store double %151, double* %144, align 8, !tbaa !2
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   store double %147, double* %153, align 8, !tbaa !2, !nontemporal !8
InstOne:   store double %159, double* %157, align 8, !tbaa !2, instTwo:   %158 = load double, double* %157, align 8, !tbaa !2Delinearizing:   store double %159, double* %157, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Strides:
8
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64))
(sext i32 %1 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: 0
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>]
  Succesfully delinearized: %13[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
Delinearizing:   %158 = load double, double* %157, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Strides:
8
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64))
(sext i32 %1 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: 0
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>]
  Succesfully delinearized: %13[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
    common nesting levels = 4
    maximum nesting levels = 4
    SrcSCEV = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
    DstSCEV = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Strides:
8
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Strides:
8
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64))
(sext i32 %1 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: 0
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
Res: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: 0
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
    subscript 0
	src = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
	dst = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
	class = 3
	loops = {1 2 3 4}
    Separable = {0}
    Coupled = {}
testing subscript 0, MIV
    src = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
    dst = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
starting gcd
    Delta = 0
    ConstDelta = 0
starting Banerjee
    Src = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
	Coefficient Info
	    1	(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %1 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %1 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %1 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    Constant = %13
    Dst = {{{{%13,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
	Coefficient Info
	    1	(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))	Pos Part = (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Neg Part = (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	Upper Bound = (-1 + (zext i32 %4 to i64))<nsw>
	    2	(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))	Pos Part = (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Neg Part = (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	Upper Bound = (-1 + (zext i32 %3 to i64))<nsw>
	    3	(8 * (sext i32 %1 to i64))<nsw>	Pos Part = (0 smax (8 * (sext i32 %1 to i64))<nsw>)	Neg Part = (0 smin (8 * (sext i32 %1 to i64))<nsw>)	Upper Bound = (-1 + (zext i32 %2 to i64))<nsw>
	    4	8	Pos Part = 8	Neg Part = 0	Upper Bound = (-1 + (zext i32 %1 to i64))<nsw>
	    Constant = %13
	Delta = 0
	Bounds[*]
	    1	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))	((-1 + (zext i32 %4 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))
	    2	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))	((-1 + (zext i32 %3 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))
	    3	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smax (8 * (sext i32 %1 to i64))<nsw>))<nsw> + (0 smin (8 * (sext i32 %1 to i64))<nsw>)))	((-1 + (zext i32 %2 to i64))<nsw> * ((-1 * (0 smin (8 * (sext i32 %1 to i64))<nsw>))<nsw> + (0 smax (8 * (sext i32 %1 to i64))<nsw>)))
	    4	(8 + (-8 * (zext i32 %1 to i64))<nsw>)<nsw>	(-8 + (8 * (zext i32 %1 to i64))<nuw><nsw>)<nsw>
	Bound for level = 1
	    <	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)) + (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))))) + (-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %4 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))<nsw> + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))	(((-2 + (zext i32 %4 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64)))
	Bound for level = 2
	    <	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)) + (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))))) + (-8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	    =	0	0
	    >	(((-2 + (zext i32 %3 to i64)) * (0 smin ((-1 * (0 smax (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))))<nsw> + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))	(((-2 + (zext i32 %3 to i64)) * (0 smax ((-1 * (0 smin (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))))) + (8 * (sext i32 %1 to i64) * (sext i32 %2 to i64)))
	Bound for level = 3
	    <	((-8 * (sext i32 %1 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smin ((-8 * (sext i32 %1 to i64))<nsw> + (0 smin (8 * (sext i32 %1 to i64))<nsw>)))))	((-8 * (sext i32 %1 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smax ((-8 * (sext i32 %1 to i64))<nsw> + (0 smax (8 * (sext i32 %1 to i64))<nsw>)))))
	    =	0	0
	    >	((8 * (sext i32 %1 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smin ((8 * (sext i32 %1 to i64))<nsw> + (-1 * (0 smax (8 * (sext i32 %1 to i64))<nsw>))<nsw>))))	((8 * (sext i32 %1 to i64))<nsw> + ((-2 + (zext i32 %2 to i64)) * (0 smax ((8 * (sext i32 %1 to i64))<nsw> + (-1 * (0 smin (8 * (sext i32 %1 to i64))<nsw>))<nsw>))))
	Bound for level = 4
	    <	(8 + (-8 * (zext i32 %1 to i64))<nsw>)<nsw>	-8
	    =	0	0
	    >	8	(-8 + (8 * (zext i32 %1 to i64))<nuw><nsw>)<nsw>
	[ < < < < ]
	[ < < < = ]
	[ < < < > ]
	[ < < = < ]
	[ < < = = ]
	[ < < = > ]
	[ < < > < ]
	[ < < > = ]
	[ < < > > ]
	[ < = < < ]
	[ < = < = ]
	[ < = < > ]
	[ < = = < ]
	[ < = = = ]
	[ < = = > ]
	[ < = > < ]
	[ < = > = ]
	[ < = > > ]
	[ < > < < ]
	[ < > < = ]
	[ < > < > ]
	[ < > = < ]
	[ < > = = ]
	[ < > = > ]
	[ < > > < ]
	[ < > > = ]
	[ < > > > ]
	[ = < < < ]
	[ = < < = ]
	[ = < < > ]
	[ = < = < ]
	[ = < = = ]
	[ = < = > ]
	[ = < > < ]
	[ = < > = ]
	[ = < > > ]
	[ = = < < ]
	[ = = < = ]
	[ = = < > ]
	[ = = = = ]
	[ = = > < ]
	[ = = > = ]
	[ = = > > ]
	[ = > < < ]
	[ = > < = ]
	[ = > < > ]
	[ = > = < ]
	[ = > = = ]
	[ = > = > ]
	[ = > > < ]
	[ = > > = ]
	[ = > > > ]
	[ > < < < ]
	[ > < < = ]
	[ > < < > ]
	[ > < = < ]
	[ > < = = ]
	[ > < = > ]
	[ > < > < ]
	[ > < > = ]
	[ > < > > ]
	[ > = < < ]
	[ > = < = ]
	[ > = < > ]
	[ > = = < ]
	[ > = = = ]
	[ > = = > ]
	[ > = > < ]
	[ > = > = ]
	[ > = > > ]
	[ > > < < ]
	[ > > < = ]
	[ > > < > ]
	[ > > = < ]
	[ > > = = ]
	[ > > = > ]
	[ > > > < ]
	[ > > > = ]
	[ > > > > ]
  Found temporal reuse

RD: 127999
isShort: 1
instOne:   store double %159, double* %157, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %126 = load double, double* %125, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %128 = load double, double* %127, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %131 = load double, double* %130, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %135 = load double, double* %134, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %138 = load double, double* %137, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %142 = load double, double* %141, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %145 = load double, double* %144, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   store double %149, double* %130, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   store double %150, double* %137, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   store double %151, double* %144, align 8, !tbaa !2
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   store double %147, double* %153, align 8, !tbaa !2, !nontemporal !8
InstOne:   store double %170, double* %168, align 8, !tbaa !2, instTwo:   %158 = load double, double* %157, align 8, !tbaa !2Delinearizing:   store double %170, double* %168, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {(8 * ({{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57> + %67)<nsw>),+,8}<nsw><%165>
Strides:
8
(sext i32 %1 to i64)
((sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(sext i32 %1 to i64)
((sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(sext i32 %1 to i64)
((sext i32 %1 to i64) * (sext i32 %2 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64))
(sext i32 %1 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
8
Res: {(8 * ({{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57> + %67)<nsw>),+,8}<nsw><%165>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {({{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57> + %67)<nsw>,+,1}<nsw><%165>
Remainder: 0
Res: {({{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57> + %67)<nsw>,+,1}<nsw><%165>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {%67,+,1}<nuw><nsw><%165>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{%67,+,1}<nuw><nsw><%165>
succeeded to delinearize {(8 * ({{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57> + %67)<nsw>),+,8}<nsw><%165>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{%67,+,1}<nuw><nsw><%165>]
  Succesfully delinearized: %13[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{%67,+,1}<nuw><nsw><%165>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
Delinearizing:   %158 = load double, double* %157, align 8, !tbaa !2
  In Loop '<unnamed loop>', AccessFn: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Strides:
8
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms:
(8 * (sext i32 %1 to i64))<nsw>
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))
(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
Terms after sorting:
((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))
((sext i32 %1 to i64) * (sext i32 %2 to i64))
(sext i32 %1 to i64)
Sizes:
(sext i32 %3 to i64)
(sext i32 %2 to i64)
(sext i32 %1 to i64)
8
Res: {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
Sizes[i]: 8
Res divided by Sizes[i]:
Quotient: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Remainder: 0
Res: {{{{0,+,((sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,((sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(sext i32 %1 to i64)}<%57>,+,1}<nsw><%113>
Sizes[i]: (sext i32 %1 to i64)
Res divided by Sizes[i]:
Quotient: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Remainder: {0,+,1}<nuw><nsw><%113>
Res: {{{0,+,((sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(sext i32 %2 to i64)}<%48>,+,1}<nw><%57>
Sizes[i]: (sext i32 %2 to i64)
Res divided by Sizes[i]:
Quotient: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Remainder: {0,+,1}<nuw><nsw><%57>
Res: {{0,+,(sext i32 %3 to i64)}<%42>,+,1}<nw><%48>
Sizes[i]: (sext i32 %3 to i64)
Res divided by Sizes[i]:
Quotient: {0,+,1}<nuw><nsw><%42>
Remainder: {0,+,1}<nuw><nsw><%48>
Subscripts:
{0,+,1}<nuw><nsw><%42>
{0,+,1}<nuw><nsw><%48>
{0,+,1}<nuw><nsw><%57>
{0,+,1}<nuw><nsw><%113>
succeeded to delinearize {{{{0,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64) * (sext i32 %3 to i64))}<%42>,+,(8 * (sext i32 %1 to i64) * (sext i32 %2 to i64))}<%48>,+,(8 * (sext i32 %1 to i64))<nsw>}<%57>,+,8}<nsw><%113>
ArrayDecl[UnknownSize][(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]
ArrayRef[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>]
  Succesfully delinearized: %13[{0,+,1}<nuw><nsw><%42>][{0,+,1}<nuw><nsw><%48>][{0,+,1}<nuw><nsw><%57>][{0,+,1}<nuw><nsw><%113>], Sizes: [(sext i32 %3 to i64)][(sext i32 %2 to i64)][(sext i32 %1 to i64)][8]

RD: 0
isShort: 1
instOne:   store double %170, double* %168, align 8, !tbaa !2
